# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import numpy as np
import pandas as pd
import os
for dirname, _, filenames in os.walk('/content/kaggle.zip'):
  for filename in filenames:
    print(os.path.join(dirname, filename))

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

train_data = pd.read_csv('/content/train_data.txt',
                         sep = ":::", names=['movie','genre','description'], engine= 'python')

train_data.shape

train_data.head()

test_data = pd.read_csv('/content/test_data.txt',
                        sep = ":::",names=['movie','genre','description'], engine = 'python')

test_data.shape

test_data.head()

train_data.info()

train_data.isnull().sum()

train_data.describe()

test_data.isnull()

test_data.isnull().sum()

test_data.describe()

train_data.loc[:,'description'] = train_data['description'].astype(str).str.lower()
test_data.loc[:,'description'] = test_data['description'].astype(str).str.lower()

train_data.head()

train_data.drop(columns=['movie'],inplace=True)
test_data.drop(columns=['movie'],inplace = True)

train_data.head()

train_data.duplicated().sum()

test_data.duplicated().sum()

train_data = train_data.drop_duplicates()

test_data = test_data.drop_duplicates()

train_data.duplicated().sum()

test_data.duplicated().sum()

genre_value_counts = train_data['genre'].value_counts()

plt.figure(figsize=(12,8))
genre_value_counts.plot(kind='bar')
plt.title('Distribution of Movies Genre')
plt.xlabel('Genre')
plt.ylabel('No.of.MOvies')
plt.xticks(rotation = 45)
plt.show()

x_train_full = train_data['description']
y_train_full = train_data['genre']

x_test = test_data['description']
y_test = test_data['genre']

from sklearn.model_selection import train_test_split

x_train,x_val,y_train,y_val = train_test_split(x_train_full,y_train_full, test_size = 0.2, random_state=42)

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf = TfidfVectorizer(stop_words = 'english', max_features = 5000)
x_train_vec = tfidf.fit_transform(x_train)
x_val_vec = tfidf.transform(x_val)
x_test_vec = tfidf.transform(x_test)

x_train.head()

x_test.head()

from sklearn.naive_bayes import MultinomialNB
nb = MultinomialNB()
nb.fit(x_train_vec, y_train)

y_pred_val = nb.predict(x_val_vec)

from sklearn.metrics import accuracy_score, classification_report
accuracy = accuracy_score(y_val,y_pred_val)
accuracy

y_pred_test = nb.predict(x_test_vec)
accuracy_test = accuracy_score(y_test,y_pred_test)
accuracy_test

from sklearn.linear_model import LogisticRegression
LogisticRegression = LogisticRegression(max_iter = 1000)
LogisticRegression.fit(x_train_vec,y_train)

y_pred_val_log= LogisticRegression.predict(x_val_vec)

accuracy_val = accuracy_score(y_val,y_pred_val_log)
accuracy_val

y_pred_test_log = LogisticRegression.predict(x_val_vec)
accuracy_test= accuracy_score(y_test,y_pred_test_log)
accuracy_test

